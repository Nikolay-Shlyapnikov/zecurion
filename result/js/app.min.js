/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./src/js/app.js":
/*!***********************!*\
  !*** ./src/js/app.js ***!
  \***********************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/*\r\nЯ решил реализовать примитивный поиск по сотрудникам и отображение небольшого количества информации при клике на каждого из них. \r\nВ нормальных условиях для этого использовались бы AJAX запросы в базу данных на сервер,\r\nно у меня этими средствами нет возможности воспользоваться, поэтому я сделал это, используя только функционал нативного JS \r\n*/\r\nconst searchInput = document.querySelector('.search__input');\r\nconst workerCollection = document.querySelectorAll('.employees__worker');\r\n// получение необохидомой информации через HTML коллекции\r\nconst workerNameCollection = document.querySelectorAll('.worker__name');\r\nconst workerPositionCollection = document.querySelectorAll('.worker__position');\r\nconst workerPhotoCollection = document.querySelectorAll('.worker__avatar');\r\nconst workerStatusCollection = document.querySelectorAll('.worker__status');\r\nconst workerNumberCollection = document.querySelectorAll('.worker__number');\r\nconst workerStatusArr = [\"fired\", '', 'd-none'] // массив БЭМ-модификаторов, определяющих стиль статуса сотрудника, для уволенных-fired, для тех кто в отпуске-ничего и для тех у кого статус не отображается - d-none\r\nlet workerIsVisible = ['', 'active', ''] //массив БЭМ-модификаторов, определяющих стиль всей панели работника, если он в данный момент отображается в основной части контента, то active. Изначально имеет такой вид\r\n\r\n// получение необходимых для вывода информации \"контейнеров\"\r\nconst employeesContainer = document.querySelector('.employees');\r\nconst employeeName = document.querySelector('.employee__name');\r\nconst employeePhoto = document.querySelector('.employee__avatar>img');\r\nconst employeePosition = document.querySelector('.employee__position');\r\nconst employeeLastActive = document.querySelector('.last-activites__value');\r\nconst employeeLastActiveArr = ['вчера в 14:54', 'сегодня в 12:22', '20.04.2022 в 17:30']; //Какие-то значения, которые не даны в макете, я буду выдумывать сам \r\n\r\nconst employeeRiskValue = document.querySelector('.static__value-main.level-risks');\r\nconst employeeRiskChange = document.querySelector('.static__value-change.level-risks');\r\nconst employeeRiskValueArr = ['220', '157', '133']; //массив уровней риска сотрудников ниже будут такие же массивы для других показателей\r\nconst employeeRiskChangeArr = ['+30', '-100', '-55']; // массив изменения уровней риска сотрудников\r\n\r\nconst employeeProductivityValue = document.querySelector('.static__value-main.productivity');\r\nconst employeeProductivityChange = document.querySelector('.static__value-change.productivity');\r\nconst employeeProductivityValueArr = ['90', '86', '75'];\r\nconst employeeProductivityChangeArr = ['+10', '+3', '-5'];\r\n\r\nconst employeeActivityIndexValue = document.querySelector('.static__value-main.activity-index');\r\nconst employeeActivityIndexChange = document.querySelector('.static__value-change.activity-index');\r\nconst employeeActivityIndexValueArr = ['3.5', '2.4', '1.8'];\r\nconst employeeActivityIndexChangeArr = ['+21', '+14', '-20'];\r\n\r\nlet workerInfo = [];\r\n\r\nfor (let i = 0; i < workerNameCollection.length; i++) { //Создание массива объектов - \"базы данных\"\r\n    workerInfo[i] = {\r\n        imgSrc: workerPhotoCollection[i].firstElementChild.src,\r\n        name: workerNameCollection[i].innerText,\r\n        status: workerStatusCollection[i].textContent,\r\n        position: workerPositionCollection[i].textContent,\r\n        number: workerNumberCollection[i].textContent,\r\n        timeActive: employeeLastActiveArr[i],\r\n        riskValue: employeeRiskValueArr[i],\r\n        riskChange: employeeRiskChangeArr[i],\r\n        productivityValue: employeeProductivityValueArr[i],\r\n        productivityChange: employeeProductivityChangeArr[i],\r\n        indexActivityValue: employeeActivityIndexValueArr[i],\r\n        indexActivityChange: employeeActivityIndexChangeArr[i],\r\n    }\r\n}\r\nsearchInput.addEventListener('input', (e) => {\r\n    if (searchIndexOfWorker(e.target.value)) {\r\n        printResults(searchIndexOfWorker(e.target.value));\r\n    }\r\n    if (!searchIndexOfWorker(e.target.value)) {\r\n        employeesContainer.innerHTML = 'Поиск не дал результатов';\r\n    }\r\n});\r\n\r\nfor (let i = 0; i < workerCollection.length; i++) {\r\n    workerCollection[i].addEventListener('click', (e) => {\r\n        for (let j = 0; j < workerCollection.length; j++) { //если сработал клик, то нужно со всех остальных работников убрать класс active\r\n            workerCollection[j].classList.remove('active');\r\n        }\r\n        workerCollection[i].classList.add('active'); // а на необходимого работника наоборот повесить класс active\r\n        employeeName.innerHTML = workerInfo[i].name;\r\n        employeePhoto.src = workerInfo[i].imgSrc;\r\n        employeeLastActive.innerHTML = workerInfo[i].timeActive;\r\n\r\n        employeeRiskValue.innerHTML = employeeRiskValueArr[i];\r\n        if (employeeRiskChangeArr[i] > 0) { // если тенденция положительная, то добавляется соответствующий css-класс, так для всех трех показателей\r\n            employeeRiskChange.classList.remove('negative');\r\n            employeeRiskChange.classList.add('positive');\r\n\r\n        }\r\n        if (employeeRiskChangeArr[i] < 0) {\r\n            employeeRiskChange.classList.remove('positive');\r\n            employeeRiskChange.classList.add('negative');\r\n        }\r\n        employeeRiskChange.innerHTML = `${employeeRiskChangeArr[i]}%`;\r\n        employeeProductivityValue.innerHTML = employeeProductivityValueArr[i];\r\n        if (employeeProductivityChangeArr[i] > 0) {\r\n            employeeProductivityChange.classList.remove('negative');\r\n            employeeProductivityChange.classList.add('positive');\r\n        }\r\n        if (employeeProductivityChangeArr[i] < 0) {\r\n            employeeProductivityChange.classList.remove('positive');\r\n            employeeProductivityChange.classList.add('negative');\r\n        }\r\n        employeeProductivityChange.innerHTML = `${employeeProductivityChangeArr[i]}%`;\r\n        employeeActivityIndexValue.innerHTML = employeeActivityIndexValueArr[i];\r\n        if (employeeActivityIndexChangeArr[i] > 0) {\r\n            employeeActivityIndexChange.classList.remove('negative');\r\n            employeeActivityIndexChange.classList.add('positive');\r\n        }\r\n        if (employeeActivityIndexChangeArr[i] < 0) {\r\n            employeeActivityIndexChange.classList.remove('positive');\r\n            employeeActivityIndexChange.classList.add('negative');\r\n        }\r\n        employeeActivityIndexChange.innerHTML = `${employeeActivityIndexChangeArr[i]}%`;\r\n\r\n    })\r\n\r\n}\r\n\r\nfunction searchIndexOfWorker(inputValue) { //Функция которая ищет результаты совпадения. Возвращает массив индексов или false, если ничего не найдено\r\n    let resultsArr = [];\r\n    for (let i = 0; i < workerNameCollection.length; i++) {\r\n        if (inputValue != '' && inputValue != ' ') {\r\n            if (workerNameCollection[i].textContent.includes(inputValue)) {\r\n                resultsArr.push(i);\r\n            }\r\n        }\r\n    }\r\n    if (resultsArr.length > 0) {\r\n        return resultsArr;\r\n    } else {\r\n        if (inputValue == '') { // если строка поиска пустая, то всё возвращается в изначальное положение \r\n            resultsArr = [0, 1, 2];\r\n            return resultsArr;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n}\r\n\r\nfunction printResults(arrayOfIndex) { // функция, отрисовывающая результаты поиска на основе массива совпадающих индексов \r\n    employeesContainer.innerHTML = '';\r\n    for (let i = 0; i < arrayOfIndex.length; i++) {\r\n        employeesContainer.insertAdjacentHTML('beforeend', `\r\n\t\t\t<div class=\"employees__worker ${workerIsVisible[arrayOfIndex[i]]}\">\r\n\t\t\t<div class=\"worker__left-side\">\r\n\t\t\t\t <div class=\"worker__avatar\">\r\n\t\t\t\t\t  <img src=\"${workerInfo[arrayOfIndex[i]].imgSrc}\" alt=\"\">\r\n\t\t\t\t </div>\r\n\t\t\t\t <div class=\"worker__info\">\r\n\t\t\t\t\t  <div class=\"worker__name\">${workerInfo[arrayOfIndex[i]].name}</div>\r\n\t\t\t\t\t  <div class=\"worker__position\">${workerInfo[arrayOfIndex[i]].position}</div>\r\n\t\t\t\t\t  <div class=\"worker__status ${workerStatusArr[arrayOfIndex[i]]}\">${workerInfo[arrayOfIndex[i]].status}</div>\r\n\t\t\t\t </div>\r\n\t\t\t</div>\r\n\t\t\t<div class=\"worker__number\">${workerInfo[arrayOfIndex[i]].number}</div>\r\n\t  </div>\r\n\t\t\t`);\r\n    }\r\n\r\n}\n\n//# sourceURL=webpack://gulp-2022/./src/js/app.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The require scope
/******/ 	var __webpack_require__ = {};
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./src/js/app.js"](0, __webpack_exports__, __webpack_require__);
/******/ 	
/******/ })()
;